---
title: Haplotype reconstruction for a real potato 3x3 diallel population.
author: Chaozhi Zheng
---

# Setup PolyOrigin

For parallel computation
```julia; eval = false
using Distributed
addprocs(4)
@info string("nworkers=", nworkers())
@everywhere using PolyOrigin
```
Set four worker processes on local machine. See the manual
of `addprocs` for launching worker processes via the specified cluster manager
or on remote machines via SSH. The last line makes PolyOrigin avaiable on all processes.

For non-parallel computation
```julia
using PolyOrigin
```

# Input files

Set working directory to the direcotry of this file.
```julia; results = "hidden"
cd(@__DIR__)
```

Set input files and outstem
```julia; results = "hidden";
genofile = "TableS2_dose.csv"
pedfile = "TableS3_ped.csv"
chrsubset = 1:4
outstem = "potato_output"
```

Check input files. In the pedfile, the parents of founders are set to 0.
```julia
using CSV, DataFrames
show(CSV.read(pedfile,DataFrame)[1:8,:],eltypes=false)
```
In the genofile, columns 1-3 denote the marker map, and rest
columns for the dosages of parents and offspring (NA denotes missing).
```julia
show(CSV.read(genofile,DataFrame)[1:5,1:5],eltypes=false)
```

plot crossdesign for the 5x5 diallel cross.
```julia
polygeno = readPolyGeno(genofile, pedfile,isphysmap=true,recomrate=1.25)
PolyOrigin.plotdesign(polygeno)
```

# Run polyOrigin

run polyOrigin
```julia; results = "hidden"; eval=false
@time polyancestry= polyOrigin(genofile,pedfile;
    refinemap=true,
    refineorder=false,
    isphysmap=true,
    recomrate=1.25,
    chrsubset=chrsubset,
    snpsubset=1:5:1000,
    isparallel=true,    
    outstem=outstem
)
```
The keyargs `isphysmap`  and `recomrate` transform the input physical map (positions
in base pairs) into genetic map with speficied constant recombation rate. `chrsubset`
and `snpsubset` specify a subset of marker data for a fast test.  `isparallel`
specifies if computations are parallel among chromosomes, and `outstem`
specifies the stem of output files.`refinemap` and `refineorder` specify to refine
inter-marker distances but not local marker ordering.

The returned polyancestry from polyOrigin has been saved.
```julia; results = "hidden"; echo = false
rm(outstem*"_condprob.gif",force=true)
```
```julia
outfiles = filter(x->occursin(outstem,x), readdir())
```
[Click to view log file](potato_output.log)

# Check output

The main output file constains multiple dataframes.
```julia
ancestryfile = outstem*"_polyancestry.csv"
res = PolyOrigin.readdlm2dict(ancestryfile)
keys(res)
```
The parentgeno dataframe. At each marker for each parent, the phased parental
genotype is given by e.g. 1|2|2|1, where 1 and 2 denote the two alleles.
```julia
show(res["parentgeno"][1:10:100,1:5],eltypes=false)
```

The genoprob dataframe. At each marker for each offspring, the posterior probability
distribution is given by e.g. 57|87=>0.336|0.664, meaning that the posterior
probabilities of ancestral genotypes 57 and 87 are 0.336 and 0.664, respectively.
```julia
show(res["genoprob"][1:10:100,1:4],eltypes=false)
```
The ancestral genotypes are defined for each sub-population in the following.
The columns state and stateindex denote the ancestral genotypes.
```julia
show(res["ancestralgenotype"][sort(rand(1:100,10)),:],eltypes=false)
```
where 1-4 denote the homologs in the first parent, and 5-8 for the second parent.

The valentprob dataframe. For each offpsring in each chromosome, the valent is
given eg. 1:3-2:4&5:8-6:7|1:3-2:4&5:6:7:8 where & delimits the valent configurations
between two parents, and |  delimits each possible combination of valent configurations.
The column valentprob gives the full posterior probabilties.
```julia
println(join(names(res["valentprob"])[[1,2,5,7]],", "))
println(join(Vector(res["valentprob"][1,[1,2,5,7]]),", "))
```

# Relative frequencies of valent configurations

We can read polyancestry
```julia; results = "hidden"
polyancestry = readPolyAncestry(outstem*"_polyancestry.csv")
```

Relative frequencies of bi- or quadri-valent formations for each parent in
each chromosome
```julia
valentfreq = calvalentfreq(polyancestry)
```

plot the relative frequences averaging overage chromosomes/parents
```julia
plotvalentfreq(valentfreq)
```
where 1:2:3:4 denotes quadrivalent formation and the others for bivalent formations

# Visualize conditional probability

Visualize haplotype probabilities of single offspring
```julia
plotCondprob(polyancestry,offspring=1)
```

Visualize haplotype probabilities of all offspring
```julia; results = "hidden"
animCondprob(polyancestry,fps=0.5,outfile=string(outstem,"_condprob.gif"))
```
![](potato_output_condprob.gif)

where `fps` specifies the number of frames per seconds, for exmaple, `fps=0.5`
means one figure every two seconds.

# Evaluate estimated map

Compare estimated map with input physical map
```julia
polygeno=readPolyGeno(genofile,pedfile,isphysmap=true)
plotMapComp(polygeno.markermap[chrsubset],polyancestry.markermap,
  xlabel="Physical position (Mbp)",
  ylabel="Estimated position (cM)"
)
```

where r is kendall rank correlation for each chromsome.
