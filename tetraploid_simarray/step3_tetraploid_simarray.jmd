---
title: Haplotype reconstruction in a simulated tetrapoloid multiparental population
author: Chaozhi Zheng
---

# Setup PolyOrigin

Non-parallel computation for simulated data with one linkage group
```julia
using PolyOrigin
```

# Input files
Set working directory to the direcotry of this file.
```julia; results = "hidden"
cd(@__DIR__)
```

Set input files and outstem
```julia; results = "hidden"
dataid = "tetraploid_simarray"
genofile = string(dataid,"_geno_disturbed.csv")
pedfile = string(dataid,"_ped.csv")
outstem = string(dataid,"_output")
```

Check input files. In the pedfile, the parents of founders are set to 0.
```julia
using CSV, DataFrames
show(CSV.read(pedfile,DataFrame)[1:8,:],eltypes=false)
```
In the genofile, columns 1-3 denote the marker map, and rest
columns for the dosages of parents and offspring (NA denotes missing).
```julia
show(CSV.read(genofile,DataFrame)[1:5,1:10],eltypes=false)
```

plot crossdesign for the 5x5 diallel cross.
```julia
polygeno = readPolyGeno(genofile, pedfile)
PolyOrigin.plotdesign(polygeno;method=:circular)
```

# Run polyOrigin

run polyOrigin
```julia; results = "hidden"; eval=false
@time polyancestry= polyOrigin(genofile,pedfile;
    refinemap=true,
    refineorder=true,
    isphysmap=false,
    outstem=outstem
)
```
Keyargs `refinemap` and `refineorder` specify to refine inter-marker distances
and local marker ordering, `isphysmap = fase` specifies that the input map is
genetic map,  and `outstem` specifies the stem of output files.

The returned polyancestry from polyOrigin has been saved.
```julia; results = "hidden"; echo = false
rm(outstem*"_condprob.gif",force=true)
```
```julia
outfiles = filter(x->occursin(outstem,x), readdir())
```
[Click to view log file](tetraploid_simarray_output.log)

# Check output

The main output file constains multiple dataframes.
```julia
ancestryfile = outstem*"_polyancestry.csv"
res = PolyOrigin.readdlm2dict(ancestryfile)
keys(res)
```
The parentgeno dataframe. At each marker for each parent, the phased parental
genotype is given by e.g. 1|2|2|1, where 1 and 2 denote the two alleles.
```julia
show(res["parentgeno"][1:10:100,1:6],eltypes=false)
```

The genoprob dataframe. At each marker for each offspring, the posterior probability
distribution is given by e.g. 57|87=>0.336|0.664, meaning that the posterior
probabilities of ancestral genotypes 57 and 87 are 0.336 and 0.664, respectively.
```julia
show(res["genoprob"][1:10:100,1:4],eltypes=false)
```
The ancestral genotypes are defined for each sub-population in the following.
The columns state and stateindex denote the ancestral genotypes.
```julia
show(res["ancestralgenotype"][sort(rand(1:100,10)),:],eltypes=false)
```
where 1-4 denote the homologs in the first parent, and 5-8 for the second parent.

The valentprob dataframe. For each offpsring in each chromosome, the valent is
given eg. 1:3-2:4&5:8-6:7|1:3-2:4&5:6:7:8 where & delimits the valent configurations
between two parents, and |  delimits each possible combination of valent configurations.
The column valentprob gives the full posterior probabilties.
```julia
println(join(names(res["valentprob"])[[1,2,5,7]],", "))
println(join(Vector(res["valentprob"][1,[1,2,5,7]]),", "))
```

# Relative frequencies of valent configurations

We can read polyancestry
```julia; results = "hidden"
polyancestry = readPolyAncestry(outstem*"_polyancestry.csv")
```

Relative frequencies of bi- or quadri-valent formations for each parent in
each chromosome
```julia
valentfreq = calvalentfreq(polyancestry)
```

plot the relative frequences averaging overage chromosomes/parents
```julia
plotvalentfreq(valentfreq)
```
where 1:2:3:4 denotes quadrivalent formation and the others for bivalent formations

# Calculate estimation error probability

Read true value file used in simulating data
```julia
truegeno = readTruegeno!(string(dataid,"_true.csv"), polyancestry)
keys(truegeno)
```
where the absolute phase of `polyancestry.parentgeno` is set to be consistent
with that of `truegeno.parentgeno`, and `polyancestry.genoprob` and
`polyancestry.haploprob` are re-ordered accordingly, and
* `:truemap` = true genetic map,
* `:estmap` = estimated genetic map resulting from map refinement,
* `:parentgeno` = true phased paental genotypes,
* `:offspringgeno` = true parental origins.

```julia
acc=calAccuracy!(truegeno,polyancestry)
```
where
* `ndoseerr` = number of wrongly estimated parental dosages,
* `nphaseerr` = number of wrongly estimated parental phases,
* `nalleleerr` = number of wrongly estimated alleles for  parental phased genotypes,
* `nparentgeno` = total number of parental genotypes,
* `assignerr` = one minus probability of true unphased origin-genotype,
* `callerr` = fraction of unphased ancestral genotypes being wrongly called,
* `delfraction` = fraction of markers being deleted.

# Visualize conditional probability

Visualize haplotype probabilities of single offspring
```julia
plotCondprob(polyancestry,truegeno=truegeno,offspring=1)
```

Visualize haplotype probabilities of all offspring
```julia; results = "hidden"
animCondprob(polyancestry,truegeno=truegeno,fps=0.5,
  outfile=outstem*"_condprob.gif")
```
![](tetraploid_simarray_output_condprob.gif)

where `fps` specifies the number of frames per seconds, for exmaple, `fps=0.5`
means one figure every two seconds.

# Evaluate estimated map

Compare input map and estimated map with true map
```julia
using Plots
polygeno=readPolyGeno(genofile,pedfile)
fig = plotMapComp(truegeno.truemap,polygeno.markermap,
    xlabel="True position (cM)",
    ylabel="Input position (cM)")
fig2 = plotMapComp(truegeno.truemap, polyancestry.markermap,
    xlabel="True position (cM)",
    ylabel="Estimated position (cM)")
plot(fig,fig2)
```

where r is the Kendall rank correlation between true map and comparing map.
